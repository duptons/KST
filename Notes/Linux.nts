## vim: set syntax=sh : ##
##						##
##		Linux Notes		##
##						##
## -------------------- ##


参考文件列表：
	[1] "kst/Codes/shell/loading.sh"
	[2] "kst/rc-files/screenrc.std"
	[3] "kst/rc-files/vimrc.std"




['" Linux/shell常用命令 "']

	## `awk`
		| cat /etc/passwd | grep -v nologin | awk -F":" '{ print $1"--"$2"--"$3; }'
			>> -F 后面跟分隔符，如 -F":"
			>> 如果省略 -F 参数，则默认分隔符为空格，等价于 -F" "
			>> '{ xxx }' 中的 xxx 是运算核心（awk处理函数）。一般情况下，\
				像 '{ print $1; print "is: "$3; }' 这种形式，只能以"行"为单位进行处理，\
				要想对"行内"的每一个切割做处理，要使用for循环，\
				像这样 '{ for (i=0; i<NF; ++i) {j = i+1; print j": "$(i+1);} }'

		| whereis python | awk '{ for (i=1; i<NF; ++i) print $(i+1); }' | xargs ls -ld
			>> 上面这条基本等价于：
				| whereis python | awk '{ for (i=1; i<NF; ++i) print $(i+1); }' | while read line; do
				| 	ls -ld $line
				| done
			>> 也等价于：[进程替换写法，解决while局部变量问题]
				| while read line; do
				| 	ls -ld $line
				| done < <(whereis python | awk '{ for (i=1; i<NF; ++i) print $(i+1); }')


	## `cd`
		...
			| cd ~/prod
				>> 目录切换到 ~/prod

			| cd -
				>> 返回上一次目录
				>> 注意：
					如果有文件夹名称开头是-，例如 -aaa，\
					则 `cd -aa` 命令无法进入此文件夹，应该使用 `cd ./-aa` 来代替。

		... 屏蔽`cd -`的输出回显
			| cd - > /dev/null
				>> 将输出重定向到 /dev/null 来屏蔽回显


	## `chattr` & `lsattr`
		| chattr ???
		| lsattr ???


	## `chmod` & `chown`
		... `chmod`
			| chmod 655 aaa
				>> 改变文件 aaa 操作权限为655，即rw-r-xr-x
				>> r=4  w=2  x=1

			| chmod +x aaa
				>> 给文件aaa增加操作权限x（执行）

			| chmod -R 777 aaa
				>> 将文件夹 aaa 及其所有子文件的操作权限改为777，即rwxrwxrwx
				>> -R 表示递归

		... `chown`
			| chown -R www:www aaa
				>> 将文件夹 aaa 及其所有子文件的所属权限设置为 www:www
				>> -R 表示递归


	## `cp`
		| cp -P aaa bbb
			>> -P 表示永远不要跟随源文件中的符号链接

		| cp -a aaa bbb
			>> -a 相当于 -dR，表示对目录的递归复制


	## `curl`
		| curl http://www.abc.com

		| curl -o bbb.png  http://www.abc.com/xxx.png
			>> 将远程文件下载保存，命名为 bbb.png

		| curl -O http://www.abc.com/xxx.png
			>> 将远程文件下载保存，名称不变，仍然是 xxx.png

		| curl -d ... ???


	## `cut`
		| cat xxx | cut -d":" -f2
			>> 上面这条基本等价于：
				| cat xxx | awk -F":" '{ print $2; }'
			>> -d 后面跟分隔符，如 -d":"
			>> -f 后面跟数字，表示第几"列"


	## `du`
		| du -sh
		| du -sh *


	## `echo`
		... 打印出彩色字
			| echo -e "\033[34;46m xxxxxx \033[0m"
				>> -e 表明输出的字符串支持 \ 转义
					常用：
						"\c"	不换行，等价于 echo -n ""
						"\b"	回退一格

		... 经典的"下载状态"事例
			参考 [1]


	## `export`
		一般地，`export` 的功能只在当前shell生效
		

	## `find`
		| find filepath -name "*.pyc"
			>> 查找名称为*.pyc的文件或文件夹，*代表任意字符
			>> filepath 使用shell通配符
			>> "*.pyc" 使用shell通配符

		| find ./ -name "*.pyc" | xargs rm -rf
			>> 将查找到的文件删除掉


	## `git`
		... 图解
			†-------------†                    †---------------†                    †-----------† 
			|   Working   |    git checkout    |               |     git reset      |		    | 
			|  Directory  |  <––––––––––––––   |  Stage/Index  |  <––––––––––––––   |  History  | 
			|             |   ––––––––––––––>  |     缓冲区    |   ––––––––––––––>  |   历史区  | 
			|    工作区   |      git add       |               |     git commit     |		    | 
			†-------------†                    †---------------†                    †-----------†  

		... 本地操作
			| git add .
			| git status
			| git commit -m "comment"
			| git log
			| git diff
				) | git diff --cached
			| git remote -v
			| git config
				) | git config --list
				) | git config --global user.email "dupton@126.com"
				) | git config --global user.name "Dupton"
				) | git config --global core.editor vim

		... 远程操作
			| git push
				) | git push origin master
			| git pull
				) | git pull --rebase origin master


	## `grep`
		| grep -rn "string" filepath
			>> 在路径filepath下查找字符串"string"所在的文件，结果为 "文件:行号:内容"
			>> 如果filepath为 * ，则表示递归当前路径下所有目录
			>> -r 	递归
			>> -n 	行号
			>> "string" 使用正则
			>> filepath 使用shell通配符

		| grep -v "string" filepath
			>> -v  取反（取得当前不匹配的结果，即否定）

		| grep "pattern1\|pattern2" filepath
			>> 使用 '\|' 来分割多个pattern，来实现OR的操作


	## `hostname`
		| hostname -I
			>> 显示当前服务器的IP


	## `jobs` & `fg`
		... 如果一个命令正在运行，又想退出让它后台运行，按<Ctrl+Z>

		... 查看刚刚的后台运行
			| jobs

		... 将某个后台的job还原到前台来
			| fg %n 
				>> n 是用 jobs 查看时候显示的id


	## `ln`
		| ln -s aaa bbb
			>> 给文件aaa建立一个符号链接bbb


	## `ls`
		| ls -pls
			>> -p 文件夹后面会跟 '/' 符号
			>> -l 列表显示（每行显示一个，并有详细信息）
			>> -s 显示文件大小

		| ls -a
			>> 显示隐藏文件（以 '.' 开头的文件）

		| ls -d aaa/
			>> -d 不递归列出文件夹 aaa 下面的内容，只显示 aaa 的信息，\
				如果 aaa 是文件，则加不加 -d 都没区别

		| ls -lu
			>> -u 显示最后"使用"时间（包括仅仅的读操作）而非"修改"时间


	## `lsof`
		| sudo lsof -i :port
			>> 查询启用该端口号的进程及其PID，注意使用root权限，或sudo方式


	## `nc`
		| nc -z hostname port


	## `netstat`
		| netstat -lntp
			>> 查看所有监听端口

		| netstat -antp
			>> 查看所有已经建立的连接

		| netstat -s
			>> 查看网络统计信息


	## `nslookup` & `dig`
		| dig +trace www.xxx.com
			>> DNS解析追踪

		| nslookup www.xxx.com
			>> ???


	## `pinky`
		... ??? 


	## `ps`
		| ps aux | grep "python"


	## `read`
		| read -p "输入密码："
			>> -p 用于指定提示符
			>> 上面这条命令不需要变量来保存输入

		| read -p "Enter: " aaa bbb
			>> 同时读取两个变量 aaa 和 bbb
			>> 用空格来分割、区分


	## `screen`
		... 配置
			文件 ~/.screenrc
			参考 [2]

		... 操作
			| screen -S screenname		# 打开一个新的screen
			| screen -ls 				# 列出所有打开的screen
			| screen -r screenname		# 连接到名为name的screen (detached ==> attached)
			| screen -d screenname		# 退出名为name的screen (attached ==> detached)

		... screen中的命令操作
			进入一个screen之后，可以使用 <Ctrl-A> + [KEY] 执行各种操作
			) <Ctrl-A> + c 				打开一个新窗口
			) <Ctrl-A> + <SPACE>		循环切换窗口
			) <Ctrl-A> + 0-9			切换至某一个窗口，有数字命名的id
			) <Ctrl-A> + <Ctrl-A>		最近使用过的两个窗口相互切换
			) <Ctrl-A> + A 				命名窗口名称
			) <Ctrl-A> + K/k 			杀死当前窗口
			) <Ctrl-A> + d 				退出当前screen


	## `ssh` & `scp`
		... `ssh`
			| ssh username@host
				>> 远程登录，默认端口22

			| ssh -p port -o option  username@host
				>> -p 用来支持非22端口
				>> -o 一般用来设置前置代理，如 -o "ProxyCommand corkscrew 192.168.1.129 2110 %h %p"

		... `scp`
			| scp aaa username@host:/filepath/bbb
				>> 将 aaa 复制到 username@host:/filepath/ 路径下的 bbb 处
				>> 按下回车 => 输入登录密码 => 复制成功

			| scp -P port -o option aaa username@host:/filepath/bbb
				>> -P 用来支持非22端口
				>> -o 一般用来设置前置代理，如 -o "ProxyCommand corkscrew 192.168.1.129 2110 %h %p"


	## `ssh-keygen` & `ssh-add`
		... 密钥生成和使用步骤
			1> 准备生成的命令
				| ssh-keygen -t rsa -C "abcdef"
					>> -t ???
					>> -C 注释、说明等

			2> 按3次回车，大功告成， 生成一对公钥/私钥，存放在~/.ssh文件夹下，\
				其中id_rsa保存"私钥"、id_rsa.pub保存"公钥"
				注意：
					若不想用默认的id_rsa，可在第一次回车前输入你想要的文件名，如git_rsa

			3> 将密钥添加成为可用密钥
				| ssh-add ~/.ssh/id_rsa
					>> 注意：
						如果添加出错，如”Could not open a connection to your authentication agent.“，\
						则执行 `ssh-agent bash`，之后重新执行本条命令

			4> 查看密钥是否添加成功
				| ssh-add -l
					>> 列出（查看）所有添加的rsa

			5> 复制 id_rsa.pub 到对方服务器，从而实现无密码登录


	## `svn`
		... checkout
			| svn co svn://localhost/product/web/branch-one

			| svn co --depth=empty svn://.../example
				>> 只检出目录但不检出目录下其他内容

		... 问题处理
			>> "connection refused"（无法连接）
				由于是使用跳板机的原因，需要远程连接svn
				一般可以使用
				| ssh -fNC -L 3690:172.20.23.253:3690 webdev@172.20.0.52

			>> "skipped '.'" （连接的目录不对）

			>> "Network connection closed unexpectedly"
				???

			>> "svn is already under version control"
				在需要add的目录下递归的删掉所有.svn文件，然后重新add
				| find ./ -name ".svn" | xargs rm -rf

			>> 其他普通问题
				一般可以直接 svn cleanup，然后再使用

		... SVN setting example
			| passtype // simple
			| username // wuyuanwang
			| password // a25d6714
			| svn:realmstring // <svn://localhost:3690> a040f60c-cf44-427d-8f88-9b95427dc95e


	## `tail`
		| tail -f aaa
			>> 显示文件 aaa 末尾几行，并不断刷新，通常用来实时监控log文件
			>> -f 表示不断刷新


	## `tar`
		... 单个文件夹或文件
			| tar czvf aaa.tar.gz bbb		# 打包
			| tar xzvf aaa.tar.gz bbb		# 解压

		... 多个文件或文件夹
			| tar czvf aaa.tar.gz  bbb ccc ddd
				>> 将 bbb ccc ddd 打包到一个文件 aaa.tar.gz 中

			| tar xzvf aaa.tar.gz -C  bbb
				>> 将 aaa.tar.gz 解压到文件夹 bbb 中
				>> -C 表示文件夹
				>> 将所有内容解压至某个文件夹bbb，是为了防止污染当前目录结构，\
					保证一定的可读性, 管理结构的完整性。
				>> 如果文件夹 bbb 不存在，需要先创建 `mkdir bbb`


	## `tty`
		| tty
			>> 显示当前所处的控制终端名称，一般路径在\
				/dev/pts/ 这里，比如有/dev/pts/0, /dev/pts/2 ...

		| echo "hahaha" > /dev/pts/2
			>> 将"hahaha"重定向到/dev/pts/2终端去，\
				这种用法以前有遇到过，比如 echo "hahaha" > /dev/null
			>> 两台电脑可以通过同一个服务器来完成"剪切板"数据交换


	## `vi` & `vim`
		... 配置
			文件 ~/.vimrc
			参考 [3]

		... 操作
			1> 命令模式
				>> 设置寄存器			'qk...q'
					k 是寄存器的名称
					... 是要设置的命令序列
				>> 调用寄存器			'@k'

			2> 底部模式 ':'
				>> sed方式替换			':s/\<word\>/WORD/g'
				>> 查看寄存器			':reg'
				>> 查看设置				':set'
				>> 查看语法状态			':set syntax'

			3> 搜索模式 '/'
				>> \c忽略大小写			'/\cmysql'

		... 寄存器
			特殊寄存器 '"' '0-9' 'k'(自定义宏) '-' '.' ':' '%' '/'

			以下用'x'来代表任意寄存器
			1> 命令模式
				>> '@x' 方式调用：直接执行
				>> '"x' 方式调用：返回字符串，一般紧跟p/P操作符

			2> 输入模式 '/' 'i' ':'
				>> '<C-R>x' 方式调用：返回字符串，在此类模式下会直接被粘贴

		... 语法支持
			| set syntax = xxx
				>> xxx 可能是 sh python php vim conf dosbatch ...


	## `vimdiff` & `diff`
		| vimdiff aaa bbb
			>> 比较两个文件的不同

		| diff -urNa aaa bbb > tmp.diff
			>> 比较两个文件或文件夹的不同，将结果输出在 tmp.diff 文件中


	## `wget`
		| wget -c http://www.abc.com/xxx.mp4
			>> -c 支持断点续传

		| wget -O filename http://www.abc.com/xxx.mp4
			>> -O 对下载的文件重命名

		| wget --no-check-certificate https://www.abc.com/xxx.mp4
			>> 此参数为了解决 HTTPS 下载报错的情况


	## 'User-Related'
		... `users` 或者 `who`
			查询所有终端已登录用户（users）以及用户的各种具体信息（who）
			建议一般用who就OK了，users不太需要

		... `whoami`
			查询当前正在操作的有效用户

		... `passwd username`
			按下回车 => 输入两次新密码 => username的密码修改成功

		... `cat /etc/passwd`
			查看所有用户基本信息

		... 创建新用户并设置修改密码
			| adduser username
			| passwd username

		... 设置sudoer用户
			| vi /etc/sudoers
				>> 将此文件中的root那行复制一行，修改一下用户名即可
	

	## ......



['" 各种其他杂项 "']

	## 命令行快捷键
		<Ctrl-R>  搜索历史命令
		<Ctrl-L>  清屏，相当于 clear 命令
		<Ctrl-P>  回到上一行命令


	## 环境变量
		$SSH_CLIENT
			>> 使用ssh访问的客户端ip地址，以及端口
		$SSH_CONNECTION
			>> 使用ssh访问的客户端ip地址和本机的ip地址，以及端口
		$PATH
			>> 若要新增加/new-path，在 ~/.bashrc 中添加一行 'export PATH=$PATH:/new-path'

	## 常用配置
		1> .bashrc
			export EDITOR=vim
			alias rm='rm -i'
			alias cp='cp -i'
			alias mv='mv -i'
			alias vi='vim'


	## 常用网络协议 & 端口
		>> ICMP协议
			拒绝此协议可以阻止绑定域名的 ping 访问，但仍然可以解析 DNS 拿到IP地址

		>> 80		TCP/IP 		http服务
		>> 443		TCP/IP 		https服务
		>> 22		TCP/IP 		远程登录服务（如ssh）


	## ......
