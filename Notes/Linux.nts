## vim: set syntax=sh : ##
##						##
##		Linux Notes		##
##						##
## -------------------- ##



## Linux/shell常用命令

	`cp` & `scp`
	------------
		1> cp
			1) cp -P aaa bbb
				-P 表示永远不要跟随源文件中的符号链接
			2) cp -a aaa bbb
				-a 相当于 -dR，表示对目录的递归复制
		2> scp
			scp  aaa  username@host:/filepath/bbb
			scp  username@host:/filepath/aaa  bbb
			按下回车 => 输入登录密码 => 复制成功

	`vi` & `vim`
	------------
		1> 关于 Vim 的配置：
			配置属于自己的，即当前用户的vim：
			1) 将系统版本的 /usr/share/vim/vimrc（或者/etc/vimrc）复制到自己目录下
				cp /usr/share/vim/vimrc  ~/.vimrc
			2) 此时，被命名为.vimrc，保存在~/下面，在其中可以设置 行号、语法高亮开启、编码、缩进等
				set shiftwidth=4
				set tabstop=4
		2> vi
			:set nonu (设置无行号)		:set nu (设置有行号)
			:set paste (进入paste模式)	:set nopaste (取消paste模式)
		3> 进阶：
			1) 搜索模式，使用\c忽略大小写，例如 /\cmysql

	## `screen`
		1> 配置：
			~/.screenrc 中加入如下参数配置
				caption always "%{= kw}%-w%{= kG}%{+b}[%n %t]%{-b}%{= kw}%+w %=%d %M %0c %{g}%H%{-}"
				termcapinfo rxvt 'hs:ts=\E]2;:fs=\007:ds=\E]2;screen\007'
		2> 基本操作：
			screen -S name(名称)		打开一个新的screen
			screen -ls 					列出所有打开的screen
			screen -r name(名称)		连接到名为name的screen (detached ==> attached)
			screen -d name(名称)		退出名为name的screen (attached ==> detached)
			进入一个screen之后，可以使用 <Ctrl-A> + [KEY] 执行各种操作
			1) <Ctrl-A> + c 			打开一个新窗口
			2) <Ctrl-A> + <SPACE>		循环切换窗口
			3) <Ctrl-A> + 0-9			切换至某一个窗口，有数字命名的id
			4) <Ctrl-A> + <Ctrl-A>		最近使用过的两个窗口相互切换
			5) <Ctrl-A> + A 			命名窗口名称
			6) <Ctrl-A> + K/k 			杀死当前窗口
			7) <Ctrl-A> + d 			退出当前screen

	## `grep`
		1> grep -rn "string" filepath
			在路径filepath下查找字符串"string"所在的文件，结果为 "文件:行号:内容"
			（如果filepath为 * ，则表示递归当前路径下所有目录）
			>> "string" 使用正则
			>> filepath 使用shell通配符
			-r 	递归
			-n 	行号
		2> grep -v "string" filepath
			-v  取反（取得当前不匹配的结果，即否定）
		3> grep "pattern1\|pattern2" filepath
			使用 '\|' 来分割多个pattern，来实现OR的操作

	## `tar`
		1> 单个文件夹或文件
			tar czvf aaa.tar.gz bbb (打包)
			tar xzvf aaa.tar.gz bbb (解压)
		2> 多个文件或文件夹
			1) tar czvf aaa.tar.gz  bbb ccc ddd
				将 bbb ccc ddd 打包到一个文件 aaa.tar.gz 中
			2) tar xzvf aaa.tar.gz -C  bbb
				将 aaa.tar.gz 解压到文件夹 bbb 中
				-C 表示文件夹，
				将所有内容解压至某个文件夹是为了不污染当前目录结构，
				保证一定的可读性, 管理结构的完整性。

	## `find`
		1> find filepath -name "*.pyc"
			查找名称为*.pyc的文件或文件夹，*代表任意字符
			>> filepath 使用通配符
			>> "*.pyc" 使用shell通配符
		2> find ./ -name "*.pyc" | xargs rm -rf
			同1>，并将搜到的文件删除掉

	## `vimdiff` & `diff`
		1> vimdiff aaa bbb
			比较两个文件的不同
		2> diff -urNa aaa bbb > tmp.diff
			比较两个文件夹的不同，也可以比较文件的不同，并将结果输出在 tmp.diff 文件中

	## `cd`
		1> cd /home/xxx > /dev/null
			shell 脚本中 cd 命令有回显会输出到屏幕上，可以这样屏蔽
		2> cd -
			返回上一次目录
			注意：如果有文件夹名称开头是-，例如 -aaa，
				则 `cd -aa` 命令无法进入此文件夹，应该使用 `cd ./-aa` 来代替。

	## `echo`
		1> echo -e "\033[34;46m xxxxxx \033[0m"
			打印出彩色字
			-e 表明输出的字符串支持 \ 转义
			常用：
				"\c"	不换行
				"\b"	回退一格
		2> 经典的"下载状态"事例
			echo -e "loading:[  \c"
			for ((i=0; i<30; i++))
			do
			    sleep 0.1
			    echo -e "\b\b=>]\c"
			done
			echo ""
			sleep 1

	## `netstat`
		1> netstat -lntp
			查看所有监听端口
		2> netstat -antp
			查看所有已经建立的连接
		3> netstat -s
			查看网络统计信息

	## `chmod` & `chown`
		1> chmod
			1) chmod 655 aaa
				改变文件aaa操作权限为655，即rw-r-xr-x
			2) chmod +x aaa
				给文件aaa增加操作权限x（执行）
			3) chmod -R 777 aaa
				将文件夹aaa及其所有子文件的操作权限改为777，即rwxrwxrwx
				-R 表示递归
		2> chown
			1) chown -R www:www aaa
				将文件夹aaa及其所有子文件的所属权限设置为 www:www
				-R 表示递归

	## `ln`
		1> ln -s aaa bbb
			给文件aaa建立一个符号链接bbb

	## `curl`
		1> curl http://www.abc.com
		2> curl -O http://www.abc.com/xxx.png
			将远程文件下载保存，名称不变
		3> curl -d ... ???

	## `tail`
		1> tail -f aaa
			显示文件aaa末尾几行，并不断刷新，通常用来实时监控Log文件

	## `cat`
		1> ls -apls | cat > 1.txt
		2> ls -ld | cat > 1.txt  （ls -d 不递归）

	## `ls`
		1> ls -plus

	## `awk`
		1> cat /etc/passwd | grep -v nologin | awk -F":" '{print $1"--"$2"--"$3}'
		2> whereis python | awk '{for (i=1; i< NF; ++i) print $(i+1)}' | xargs ls -ld
			上面这条基本等价于：
				whereis python | awk '{for (i=1; i< NF; ++i) print $(i+1)}' | while read line; do
					ls -ld $line
				done
			也等价于：[进程替换写法，解决while局部变量问题]
				while read line; do
					ls -ld $line
				done < <(whereis python | awk '{for (i=1; i< NF; ++i) print $(i+1)}')

	## `cut`
		1> cat xxx | cut -d":" -f2
			等价于：
			cat xxx | awk -F":" '{print $2}'

	## 'user-related'
		1> users 或者 who
			查询所有终端已登录用户（users）以及用户的各种具体信息（who）
			建议一般用who就OK了，users不太需要
		2> whoami
			查询当前正在操作的有效用户
		3> passwd username
			按下回车 => 输入两次新密码 => username的密码修改成功
		4> cat /etc/passwd
			查看所有用户基本信息
		5> adduser username && passwd username
			创建新用户并设置修改密码
		6> vi /etc/sudoers
			设置sudoer用户，将此文件中的root部分复制一行，修改一下用户名即可

	## `ssh`
		1> ssh username@host （默认端口22）
		2> ssh -p port username@host （-p 用来支持非22端口）

	## `hostname`
		1> hostname -I  显示当前服务器的IP

	## `jobs`
		1> 如果一个命令正在运行，又想退出让它后台运行，按<Ctrl+Z>
		2> 查看刚刚的后台运行，用 jobs
		3> fg %n 用于将某个后台的job还原到前台来
		
	## `pinky`
		1> ??? 

	## `wget`
		1> wget -c url
			-c 支持断点续传
		2> wget -O filename url
			-O 对下载的文件重命名

	## `chattr` & `lsattr`
		1> chattr ???

	## `nslookup` & `dig`
		1> dig +trace www.xxx.com
			DNS解析追踪
		2> nslookup www.xxx.com

	## `tty`
		1> tty
			显示当前所处的控制终端名称，
			一般路径在 /dev/pts/ 这里，比如有/dev/pts/0, /dev/pts/2 ...
		2> echo "haha" > /dev/pts/2
			将"haha"重定向到/dev/pts/2终端去，
			这种用法以前有遇到过，比如 echo "nani" > /dev/null

	## `ps`
		1> ps aux | grep "python"

	## `du`
		1> du -sh

	## `nc`
		nc -z hostname port

	## `lsof`
		1> sudo lsof -i :port
			查询启用该端口号的进程及其PID，注意使用root权限，或sudo方式

	## `ssh-keygen` & `ssh-add`
		1> ssh-keygen -t rsa -C "注释"
			按3次回车，大功告成。
			生成一对公钥/私钥，存放在~/.ssh文件夹下，其中id_rsa（私钥）、id_rsa.pub（公钥）
			复制 id_rsa.pub 到对方服务器，从而实现无密码登录
			注意：
				如果不想使用默认的id_rsa，可以在第一次回车之前输入你想要的文件名，如git_rsa
		2> ssh-add id_rsa
			1中操作完之后，执行2的命令，完成添加
			注意：
				如果添加出错，如”Could not open a connection to your authentication agent.“
				则执行 ssh-agent bash，之后重新执行 ssh-add
		3> ssh-add -l
			列出（查看）所有添加的rsa


	## `git`
		1> git add
		2> git status
		3> git commit
			1) git commit
			2) git commit -m "comment"
		4> git log
		5> git remote
			1) git remote
			2) git remote -v
		6) git push
			1) git push origin master
		7) git pull
			1) git pull
		8) git config
			1) git config --list
			2) git config --global user.email "dupton@126.com"
			3) git config --global user.name "Dupton"
			4) git config --global core.editor vim

	## 其他快捷键
		<Ctrl-R>  搜索历史命令
		<Ctrl-L>  清屏，相当于 clear 命令
		<Ctrl-P>  回到上一行命令
		<Ctrl-?>  撤销前一次输入
		<Alt -R>  撤销前一次动作

	## 环境变量
		$SSH_CLIENT 		使用ssh访问的客户端ip地址，以及端口
		$SSH_CONNECTION 	使用ssh访问的客户端ip地址和本机的ip地址，以及端口
		$PATH
			增加新的path变量：在 ~/.bashrc 中添加一行 'export PATH=$PATH:/new-path'

	## 一些常用配置
		1> .bashrc
			export EDITOR=vim
			alias rm='rm -i'
			alias cp='cp -i'
			alias mv='mv -i'
			alias vi='vim'
